package com.ai.slack;

import java.util.*;

import com.ai.slack.data.Attachment;
import com.ai.slack.data.SlackResponce;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class ServiceController {

    private String token;
    private static String DOG_IMAGE_SERVICE = "https://dog.ceo/api/breeds/image/random";
    private static String WEATHER_SERVICE = "https://api.weatherbit.io/v2.0/current?city=SF,CA&key=dd168ce7b8ba41428e2d3e5320510f8f";
    private static String GOV_JOB_SERVICE = "https://jobs.search.gov/jobs/search.json?query=jobs&tags=federal";
    private static Logger LOG = LoggerFactory.getLogger(ServiceController.class);

    @Autowired
    private ObjectMapper mapper;

    ServiceController(){
        token = System.getProperty("SLACK_TOKEN");
    }

    /**
     * healthcheck method returns service health check
     * @return
     */
    @RequestMapping(value = "/", method = RequestMethod.GET)
    public String healthcheck() {
        return "Service works!";
    }

    /**
     * method getService handles POST requests which come from Slack client
     * @param paramMap get map of application form
     * @return Slack response
     * @throws Exception
     */
    @RequestMapping(value = "/api", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public ResponseEntity<?> getService(@RequestParam MultiValueMap<String, String> paramMap) throws Exception {
        LOG.info("HTTPRequest >>> " + paramMap.toString());
        Map<String, String> request = paramMap.toSingleValueMap();
        if (request == null)
            return new ResponseEntity(new CustomError("Http request from Slack service is empty"), HttpStatus.NO_CONTENT);

        if (!request.containsKey("command") ||
                !request.containsKey("token") ||
                !request.containsKey("text")) {
            return new ResponseEntity(new CustomError("Request doesn't have required values"), HttpStatus.BAD_REQUEST);
        }

        if (!request.get("token").equals(token))
            return new ResponseEntity(new CustomError("Incorrect token: \n") + request.get("token"), HttpStatus.CONFLICT);

        ResponseEntity<?> response = new ResponseEntity("Surprise service is running", HttpStatus.OK);
        JsonNode root;
        String data = "";
        try {
            if (request.get("text").equals("dog") || request.get("text").isEmpty()) {
                root = mapper.readTree(getRemoteService(DOG_IMAGE_SERVICE));
                data = root.get("message").asText();
                response = generateSlackResponse(data);
            }
            if (request.get("text").equals("weather") || request.get("text").isEmpty()) {
                root = mapper.readTree(getRemoteService(WEATHER_SERVICE));
                data = data + "\n" + " Current temperature in SF: " + root.get("data").get(0).get("temp").asText();
                response = generateSlackResponse(data);
            }
            if (request.get("text").equals("job") || request.get("text").isEmpty()) {
                root = mapper.readTree(getRemoteService(GOV_JOB_SERVICE));
                data = data + "\n" + mapper.writerWithDefaultPrettyPrinter().writeValueAsString(root);
                response = generateSlackResponse(data);
            }
        } catch (Exception e) {
            LOG.error("Service is unavailable ", e);
            new ResponseEntity("Service is not reachable! Error: " + e.getMessage(), HttpStatus.SERVICE_UNAVAILABLE);
        }
        return response;
    }

    /**
     * method generateSlackResponse creates slack response
     * @param data - text which will be added to slack response
     * @return response
     */
    public ResponseEntity<?> generateSlackResponse(String data){
        SlackResponce responce = new SlackResponce();
        responce.setResponseType("in_channel");
        responce.setText(data);
        List<Attachment> attachments = new ArrayList<>();
        Attachment attachment = new Attachment();
        attachment.setColor("#36a64f");
        attachment.setFooter("Generated by Surprise service");
        attachments.add(attachment);
        responce.setAttachments(attachments);
        return new ResponseEntity(responce, HttpStatus.OK);
    }

    /**
     * getRemoteService get access to weather, job or dog service by url
     * @param url sets URL to weather, job or dog services
     * @return response
     * @throws Exception
     */
    public String getRemoteService(final String url) throws Exception {
        RestTemplate restTemplate = new RestTemplate();
        final ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
        if (!response.getStatusCode().is2xxSuccessful() || StringUtils.isEmpty(response.getBody())) {
            throw new Exception("There is problem reaching service: " + url + " response code" + response.getStatusCode());
        }
        LOG.info("HTTPResponse from service " + url + " >>");
        LOG.info(response.getBody());
        return response.getBody();
    }

}
